<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tuture</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tuture.co/"/>
  <updated>2019-10-13T09:45:06.335Z</updated>
  <id>https://tuture.co/</id>
  
  <author>
    <name>图雀社区</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从零开始用 Express + MongoDB 搭建图片分享社区（一）</title>
    <link href="https://tuture.co/2019/10/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%94%A8%20Express%20+%20MongoDB%20%E6%90%AD%E5%BB%BA%E5%9B%BE%E7%89%87%E5%88%86%E4%BA%AB%E7%A4%BE%E5%8C%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://tuture.co/2019/10/13/从零开始用 Express + MongoDB 搭建图片分享社区（一）/</id>
    <published>2019-10-13T09:45:06.335Z</published>
    <updated>2019-10-13T09:45:06.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化项目结构"><a href="#初始化项目结构" class="headerlink" title="初始化项目结构"></a>初始化项目结构</h2><p>首先我们创建项目目录，并初始化 npm：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir Instagrammy &amp;&amp; <span class="built_in">cd</span> Instagrammy</span><br><span class="line">$ npm init</span><br></pre></td></tr></table></figure><a id="more"></a><p>添加 express 的项目依赖：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install express</span><br></pre></td></tr></table></figure><p>最终生成的 package.json 文件如下：</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"instagrammy"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"^4.17.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写服务器的入口文件 <code>server.js</code>，内容如下：</p><figure class="highlight js"><figcaption><span>server.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line">app = express();</span><br><span class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;app.get(<span class="string">'port'</span>)&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过 <code>node server.js</code> 运行 server.js 文件，然后在浏览器中访问 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a>，便可以看到服务器的返回的 Hello World：</p><p><img src="https://raw.githubusercontent.com/mRcfps/Instagrammy/master/tuture-assets/figure-1.png" alt></p><h2 id="配置中间件"><a href="#配置中间件" class="headerlink" title="配置中间件"></a>配置中间件</h2><p>Express 本身是一个非常简洁的 web 框架，但是通过中间件这一设计模式，能够实现非常丰富的功能。一个 Express 中间件本质上是一个函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someMiddleware</span>(<span class="params">req, res, next</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>req</code> 参数是一个 <code>express.Request</code> 对象，封装了用户请求；<code>res</code> 参数则是一个 <code>express.Response</code> 对象，封装了即将返回给用户的响应；<code>next</code> 则是在执行完所有逻辑后用于触发下一个中间件的函数。</p><p>添加中间件的代码则非常简单：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(middlewareA);</span><br><span class="line">app.use(middlewareB);</span><br><span class="line">app.use(middlewareC);</span><br></pre></td></tr></table></figure><p>中间件 A、B、C 将会在处理每次请求时<strong><em>按顺序执行</em></strong>（这也意味着中间件的顺序是非常重要的）。接下来我们将添加以下基础中间件（也是几乎所有应用都会用到的中间件）：</p><ul><li><code>morgan</code>：用于记录日志的中间件，对于开发调试和生产监控都很有用；</li><li><code>bodyParser</code>：用于解析客户端请求的中间件，包括 HTML 表单和 JSON 请求；</li><li><code>methodOverride</code>：为老的浏览器提供 REST 请求的兼容性支持；</li><li><code>cookieParser</code>：用于收发 cookie；</li><li><code>errorHandler</code>：用于在发生错误时打印调用栈，<strong><em>仅在开发时使用</em></strong>；</li><li><code>handlebars</code>：用于渲染用户界面的模板引擎，会在后面细讲。</li></ul><p>我们通过 npm 安装这些中间件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install express-handlebars body-parser cookie-parser morgan method-override errorhandler</span><br></pre></td></tr></table></figure><p>创建 server 目录，在其中添加 configure.js 模块，用于配置所有的中间件：</p><figure class="highlight js"><figcaption><span>server/configure.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> exphbs = <span class="built_in">require</span>(<span class="string">'express-handlebars'</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">const</span> methodOverride = <span class="built_in">require</span>(<span class="string">'method-override'</span>);</span><br><span class="line"><span class="keyword">const</span> errorHandler = <span class="built_in">require</span>(<span class="string">'errorhandler'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(morgan(<span class="string">'dev'</span>));</span><br><span class="line">  app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">  app.use(bodyParser.json());</span><br><span class="line">  app.use(methodOverride());</span><br><span class="line">  app.use(cookieParser(<span class="string">'secret-value'</span>));</span><br><span class="line">  app.use(<span class="string">'/public/'</span>, express.static(path.join(__dirname, <span class="string">'../public'</span>)));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (app.get(<span class="string">'env'</span>) === <span class="string">'development'</span>) &#123;</span><br><span class="line">    app.use(errorHandler());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>值得一提的是，除了上面提到的中间件，我们还用到了 express 自带的静态资源中间件 <code>express.static</code>，用于向客户端发送图片、CSS等静态文件。最后，我们通过获取 <code>env</code> 变量来判断是否处于开发环境，如果是的话就添加 <code>errorHandler</code> 以便于调试代码。</p><p>在 server.js 中调用刚才用于配置中间件的代码：</p><figure class="highlight js"><figcaption><span>server.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line">[tuture-add]<span class="keyword">const</span> configure = <span class="built_in">require</span>(<span class="string">'./server/configure'</span>);</span><br><span class="line"></span><br><span class="line">app = express();</span><br><span class="line">[tuture-add]app = configure(app);</span><br><span class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br></pre></td></tr></table></figure><h2 id="搭建路由和控制器"><a href="#搭建路由和控制器" class="headerlink" title="搭建路由和控制器"></a>搭建路由和控制器</h2><p>现在我们已经配置好了基础的中间件，但是只有主页（URL 为 <code>/</code>）可以访问。接下来我们将实现以下路由：</p><ul><li><code>GET /</code>：网站主页</li><li><code>GET /images/image_id</code>：展示单张图片</li><li><code>POST /images</code>：上传图片</li><li><code>POST /images/image_id/like</code>：点赞图片</li><li><code>POST /images/image_id/comment</code>：评论图片</li></ul><p>虽然 Express 的项目结构没有固定的套路，但是我们将采用经典的 MVC 模式（即 Model View Controller）来搭建我们的项目。Model 定义了数据模型，View 定义了用户界面，而 Controller 则定义了相应的业务逻辑。</p><p>首先创建 controllers 目录，在其中创建 home.js 文件，并定义 <code>index</code> 控制器如下：</p><figure class="highlight js"><figcaption><span>controllers/home.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  index: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'The home:index controller'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>每个控制器实际上都是一个 Express 中间件（只不过不需要 <code>next</code> 函数，因为是最后一个中间件）。这里我们暂时用 <code>res.send</code> 发一条文字来代表这个 controller 已经实现。</p><p>再在 controllers 目录下创建 image.js，实现与图片处理相关的控制器：</p><figure class="highlight js"><figcaption><span>controllers/image.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  index: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'The image:index controller '</span> + req.params.image_id);</span><br><span class="line">  &#125;,</span><br><span class="line">  create: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'The image:create POST controller'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  like: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'The image:like POST controller'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  comment: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'The image:comment POST controller'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在 server 目录下创建路由模块 routes.js，建立从 URL 到控制器之间的映射：</p><figure class="highlight js"><figcaption><span>server/routes.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">'../controllers/home'</span>);</span><br><span class="line"><span class="keyword">const</span> image = <span class="built_in">require</span>(<span class="string">'../controllers/image'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  router.get(<span class="string">'/'</span>, home.index);</span><br><span class="line">  router.get(<span class="string">'/images/:image_id'</span>, image.index);</span><br><span class="line">  router.post(<span class="string">'/images'</span>, image.create);</span><br><span class="line">  router.post(<span class="string">'/images/:image_id/like'</span>, image.like);</span><br><span class="line">  router.post(<span class="string">'/images/:image_id/comment'</span>, image.comment);</span><br><span class="line">  app.use(router);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里我们用到了 Express 自带的路由类 <code>Router</code>，可以很方便地定义路由，并且 <code>Router</code> 本身也是一个中间件，可以直接通过 <code>app.use</code> 进行配置。</p><p>接着在 server/configure.js 模块中调用路由模块。</p><figure class="highlight js"><figcaption><span>server/configure.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> methodOverride = <span class="built_in">require</span>(<span class="string">'method-override'</span>);</span><br><span class="line"><span class="keyword">const</span> errorHandler = <span class="built_in">require</span>(<span class="string">'errorhandler'</span>);</span><br><span class="line"></span><br><span class="line">[tuture-add]<span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">'./routes'</span>);</span><br><span class="line">[tuture-add]</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(morgan(<span class="string">'dev'</span>));</span><br><span class="line">  app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">[tuture-omit]</span><br><span class="line">    app.use(errorHandler());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">[tuture-add]  routes(app);</span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后我们去掉 server.js 中原来的首页路由。</p><figure class="highlight js"><figcaption><span>server.js</span></figcaption><table><tr><td class="code"><pre><span class="line">app = configure(app);</span><br><span class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">[tuture-del]app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">[tuture-del]  res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">[tuture-del]&#125;);</span><br><span class="line">[tuture-del]</span><br><span class="line">app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;app.get(<span class="string">'port'</span>)&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>到了这一步，我们运行服务器，打开浏览器访问 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a>，可以看到 <code>The home:index controller</code> 的信息；访问 <a href="http://localhost:3000/test123" target="_blank" rel="noopener">http://localhost:3000/test123</a>，则是 <code>The image:index controller test123</code>。进一步，我们还可以通过 Postman 或者 curl 等工具测试 POST 方法的 controller 是否可用。下面以 curl 为例测试 <code>POST /images</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X POST localhost:3000/images</span><br><span class="line">The image:create POST controller</span><br></pre></td></tr></table></figure><p>一切顺利！到这里可以泡杯茶好好犒劳一下自己了~</p><h2 id="配置-handlebars-模板引擎"><a href="#配置-handlebars-模板引擎" class="headerlink" title="配置 handlebars 模板引擎"></a>配置 handlebars 模板引擎</h2><p>这一步，我们将开始实现 MVC 中的 V，即 View，用户界面。</p><p>首页的效果如下图所示：</p><p><img src="https://raw.githubusercontent.com/mRcfps/Instagrammy/master/tuture-assets/figure-2.png" alt></p><p>图片详情的效果如下图所示：</p><p><img src="https://raw.githubusercontent.com/mRcfps/Instagrammy/master/tuture-assets/figure-3.png" alt></p><p>尽管如今前后端分离已经是大势所趋，但是通过模板引擎在服务器端渲染页面也是有用武之地的，特别是快速地开发一些简单的应用。在模板引擎中，<a href="http://handlebarsjs.com/" target="_blank" rel="noopener">Handlebars</a> 和 <a href="https://pugjs.org/api/getting-started.html" target="_blank" rel="noopener">Pug</a> 当属其中的佼佼者。由于 Handlebars 和普通的 HTML 文档几乎完全一致，容易上手，因此这篇教程中我们选用 Handlebars，并且选用 Bootstrap 样式。</p><p>与普通的 HTML 文档相比，模板最大的特点即在于提供了数据的接入。例如 handlebars，可以在双花括号 <code>{{}}</code> 之间填写任何数据，当服务器渲染页面时只需传入相应的数据即可渲染成对应的内容。除此之外，handlebars 还支持条件语法、循环语法和模板嵌套等高级功能，下面将详细描述。</p><p>我们创建一个 views 目录，用于存放所有的模板代码。views 目录的结构如下所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">views</span><br><span class="line">├── image.handlebars</span><br><span class="line">├── index.handlebars</span><br><span class="line">├── layouts</span><br><span class="line">│   └── main.handlebars</span><br><span class="line">└── partials</span><br><span class="line">    ├── comments.handlebars</span><br><span class="line">    ├── popular.handlebars</span><br><span class="line">    └── stats.handlebars</span><br></pre></td></tr></table></figure><p>其中 image.handlebars 和 index.handlebars 是<strong><em>页面模板</em></strong>，layouts/main.handlebars 则是整个网站的<strong><em>布局模板</em></strong>（所有页面共享），partials 目录则用于存放页面之间共享的<strong><em>组件模板</em></strong>，例如评论、数据等等。</p><p>首先完成布局模板 layouts/main.handlebars：</p><figure class="highlight handlebars"><figcaption><span>views/layouts/main.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset="UTF-8"&gt;</span><br><span class="line">  &lt;title&gt;Instagrammy&lt;/title&gt;</span><br><span class="line">  &lt;link href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" rel="stylesheet"&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class="page-header"&gt;</span><br><span class="line">    &lt;div class="container"&gt;</span><br><span class="line">      &lt;div class="col-md-6"&gt;</span><br><span class="line">        &lt;h1&gt;&lt;a href="/"&gt;Instagrammy&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class="container"&gt;</span><br><span class="line">    &lt;div class="row"&gt;</span><br><span class="line">      &lt;div class="col-sm-8"&gt;<span class="template-variable">&#123;&#123;&#123;body&#125;&#125;</span>&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>main.handlebars 本身是一个完整的 HTML 文档，包括 <code>head</code> 和 <code>body</code> 部分。在 <code>head</code> 部分，我们定义了网站的一些元数据，还加入了 Bootstrap 的 CDN 链接；在 <code>body</code> 部分，包含两个容器：网站头部（header）和每个页面的自定义内容（即<code>{{{body}}}</code> ）。</p><p>接下来编写 index.handlebars，即主页内容。这里我们暂时先写上一个大标题：</p><figure class="highlight handlebars"><figcaption><span>views/index.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;Index Page&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>还有 image.handlebars，即图片详情页面内容：</p><figure class="highlight handlebars"><figcaption><span>views/image.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;Image Page&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>index.handlebars 和 image.handlebars 的内容将替换布局模板中的 <code>{{{body}}}</code> 部分。在用户访问某个页面时，页面内容 = <strong><em>布局模板+页面模板</em></strong>。</p><p>模板写好之后，我们修改控制器相应的代码，通过 <code>res.render</code> 函数渲染模板：</p><figure class="highlight js"><figcaption><span>controllers/home.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  index: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">[tuture-del]    res.send(<span class="string">'The home:index controller'</span>);</span><br><span class="line">[tuture-add]    res.render(<span class="string">'index'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>render</code> 函数接受一个字符串参数，即页面模板的名称。例如 <code>index.handlebars</code> 的名称即为 <code>index</code>。</p><p>同样地，我们修改 image 控制器的代码：</p><figure class="highlight js"><figcaption><span>controllers/image.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  index: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">[tuture-del]    res.send(<span class="string">'The image:index controller '</span> + req.params.image_id);</span><br><span class="line">[tuture-add]    res.render(<span class="string">'image'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  create: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'The image:create POST controller'</span>);</span><br></pre></td></tr></table></figure><p>最后，不要忘记在 server/configure.js 模块中配置 handlebars 中间件：</p><figure class="highlight js"><figcaption><span>server/configure.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">'./routes'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">[tuture-add]  app.engine(<span class="string">'handlebars'</span>, exphbs());</span><br><span class="line">[tuture-add]  app.set(<span class="string">'view engine'</span>, <span class="string">'handlebars'</span>);</span><br><span class="line">[tuture-add]</span><br><span class="line">  app.use(morgan(<span class="string">'dev'</span>));</span><br><span class="line">  app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">  app.use(bodyParser.json());</span><br></pre></td></tr></table></figure><p>大功告成！现在运行服务器，分别访问主页（<a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a>）和图片详情页面（<a href="http://localhost:3000/images/test" target="_blank" rel="noopener">http://localhost:3000/images/test</a>），可以看到完整的页面（虽然没有数据），包括所有页面共享的头部和每个页面的自定义内容。</p><h2 id="完善界面代码"><a href="#完善界面代码" class="headerlink" title="完善界面代码"></a>完善界面代码</h2><p>在上面一步的基础上，我们将继续完善模板代码。</p><p>首先是在 index.handlebars 中添加上传图片的表单和展示最新图片的容器。</p><figure class="highlight handlebars"><figcaption><span>views/index.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">[tuture-del]&lt;h1&gt;Index Page&lt;/h1&gt;</span><br><span class="line">[tuture-add]&lt;div class="panel panel-primary"&gt;</span><br><span class="line">[tuture-add]  &lt;div class="panel-heading"&gt;</span><br><span class="line">[tuture-add]    &lt;h3 class="panel-title"&gt;</span><br><span class="line">[tuture-add]      上传图片</span><br><span class="line">[tuture-add]    &lt;/h3&gt;</span><br><span class="line">[tuture-add]  &lt;/div&gt;</span><br><span class="line">[tuture-add]  &lt;form action="/images" method="post" enctype="multipart/form-data"&gt;</span><br><span class="line">[tuture-add]    &lt;div class="panel-body form-horizontal"&gt;</span><br><span class="line">[tuture-add]      &lt;div class="form-group col-md-12"&gt;</span><br><span class="line">[tuture-add]        &lt;label for="file" class="col-sm-2 control-label"&gt;浏览:&lt;/label&gt;</span><br><span class="line">[tuture-add]        &lt;div class="col-md-10"&gt;</span><br><span class="line">[tuture-add]          &lt;input type="file" class="form-control" name="file" id="file"&gt;</span><br><span class="line">[tuture-add]        &lt;/div&gt;</span><br><span class="line">[tuture-add]      &lt;/div&gt;</span><br><span class="line">[tuture-add]      &lt;div class="form-group col-md-12"&gt;</span><br><span class="line">[tuture-add]        &lt;label for="title" class="col-md-2 control-label"&gt;标题:&lt;/label&gt;</span><br><span class="line">[tuture-add]        &lt;div class="col-md-10"&gt;</span><br><span class="line">[tuture-add]          &lt;input type="text" class="form-control" name="title"&gt;</span><br><span class="line">[tuture-add]        &lt;/div&gt;</span><br><span class="line">[tuture-add]      &lt;/div&gt;</span><br><span class="line">[tuture-add]      &lt;div class="form-group col-md-12"&gt;</span><br><span class="line">[tuture-add]        &lt;label for="description" class="col-md-2 control-label"&gt;描述:&lt;/label&gt;</span><br><span class="line">[tuture-add]        &lt;div class="col-md-10"&gt;</span><br><span class="line">[tuture-add]          &lt;textarea name="description" rows="2" class="form-control"&gt;&lt;/textarea&gt;</span><br><span class="line">[tuture-add]        &lt;/div&gt;</span><br><span class="line">[tuture-add]      &lt;/div&gt;</span><br><span class="line">[tuture-add]      &lt;div class="form-group col-md-12"&gt;</span><br><span class="line">[tuture-add]        &lt;div class="col-md-12 text-right"&gt;</span><br><span class="line">[tuture-add]          &lt;button type="submit" id="login-btn" class="btn btn-success"&gt;</span><br><span class="line">[tuture-add]            &lt;i class="fa fa-cloud-upload"&gt; 上传图片&lt;/i&gt;</span><br><span class="line">[tuture-add]          &lt;/button&gt;</span><br><span class="line">[tuture-add]        &lt;/div&gt;</span><br><span class="line">[tuture-add]      &lt;/div&gt;</span><br><span class="line">[tuture-add]    &lt;/div&gt;</span><br><span class="line">[tuture-add]  &lt;/form&gt;</span><br><span class="line">[tuture-add]&lt;/div&gt;</span><br><span class="line">[tuture-add]</span><br><span class="line">[tuture-add]&lt;div class="panel panel-default"&gt;</span><br><span class="line">[tuture-add]  &lt;div class="panel-heading"&gt;</span><br><span class="line">[tuture-add]    &lt;h3 class="panel-title"&gt;</span><br><span class="line">[tuture-add]      最新图片</span><br><span class="line">[tuture-add]    &lt;/h3&gt;</span><br><span class="line">[tuture-add]  &lt;/div&gt;</span><br><span class="line">[tuture-add]  &lt;div class="panel-body"&gt;</span><br><span class="line">[tuture-add]    <span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> images&#125;&#125;</span></span><br><span class="line">[tuture-add]      &lt;div class="col-md-4 text-center" style="padding-bottom: 1em;"&gt;</span><br><span class="line">[tuture-add]        &lt;a href="/images/<span class="template-variable">&#123;&#123;uniqueId&#125;&#125;</span>"&gt;</span><br><span class="line">[tuture-add]          &lt;img src="/public/upload/<span class="template-variable">&#123;&#123;filename&#125;&#125;</span>" alt="<span class="template-variable">&#123;&#123;title&#125;&#125;</span>"</span><br><span class="line">[tuture-add]            style="width: 175px; height: 175px;" class="img-thumbnail"&gt;</span><br><span class="line">[tuture-add]        &lt;/a&gt;</span><br><span class="line">[tuture-add]      &lt;/div&gt;</span><br><span class="line">[tuture-add]    <span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br><span class="line">[tuture-add]  &lt;/div&gt;</span><br><span class="line">[tuture-add]&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在展示最新图片时，我们用到了 handlebars 提供的循环语法（第 46 行到 53 行）。对于传入模板的数据对象 <code>images</code> 进行遍历，每个循环中可以访问单个 <code>image</code> 的全部属性，例如 <code>uniqueId</code> 等等。</p><p>接着完善 image.handlebars 的内容，包括展示图片的详细内容、发表评论的表单和展示所有评论的容器。</p><figure class="highlight handlebars"><figcaption><span>views/image.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">[tuture-del]&lt;h1&gt;Image Page&lt;/h1&gt;</span><br><span class="line">[tuture-add]&lt;div class="panel panel-primary"&gt;</span><br><span class="line">[tuture-add]  &lt;div class="panel-heading"&gt;</span><br><span class="line">[tuture-add]    &lt;h2 class="panel-title"&gt;<span class="template-variable">&#123;&#123;image.title&#125;&#125;</span>&lt;/h2&gt;</span><br><span class="line">[tuture-add]  &lt;/div&gt;</span><br><span class="line">[tuture-add]  &lt;div class="panel-body"&gt;</span><br><span class="line">[tuture-add]    &lt;p&gt;<span class="template-variable">&#123;&#123;image.description&#125;&#125;</span>&lt;/p&gt;</span><br><span class="line">[tuture-add]    &lt;div class="col-md-12 text-center"&gt;</span><br><span class="line">[tuture-add]      &lt;img src="/public/upload/<span class="template-variable">&#123;&#123;image.filename&#125;&#125;</span>" alt="<span class="template-variable">&#123;&#123;image.title&#125;&#125;</span>"</span><br><span class="line">[tuture-add]        class="thumbnail"&gt;</span><br><span class="line">[tuture-add]    &lt;/div&gt;</span><br><span class="line">[tuture-add]  &lt;/div&gt;</span><br><span class="line">[tuture-add]  &lt;div class="panel-footer"&gt;</span><br><span class="line">[tuture-add]    &lt;div class="row"&gt;</span><br><span class="line">[tuture-add]      &lt;div class="col-md-8"&gt;</span><br><span class="line">[tuture-add]        &lt;button class="btn btn-success" id="btn-like" data-id="<span class="template-variable">&#123;&#123;image.uniqueId&#125;&#125;</span>"&gt;</span><br><span class="line">[tuture-add]          &lt;i class="fa fa-heart"&gt; 点赞&lt;/i&gt;</span><br><span class="line">[tuture-add]        &lt;/button&gt;</span><br><span class="line">[tuture-add]        &lt;strong class="likes-count"&gt;<span class="template-variable">&#123;&#123;image.likes&#125;&#125;</span>&lt;/strong&gt; &amp;nbsp; - &amp;nbsp;</span><br><span class="line">[tuture-add]        &lt;i class="fa fa-eye"&gt;&lt;/i&gt;</span><br><span class="line">[tuture-add]        &lt;strong&gt;<span class="template-variable">&#123;&#123;image.views&#125;&#125;</span>&lt;/strong&gt;</span><br><span class="line">[tuture-add]        &amp;nbsp; - &amp;nbsp; 发表于: &lt;em class="text-muted"&gt;<span class="template-variable">&#123;&#123;image.timestamp&#125;&#125;</span>&lt;/em&gt;</span><br><span class="line">[tuture-add]      &lt;/div&gt;</span><br><span class="line">[tuture-add]      &lt;div class="col-md-4 text-right"&gt;</span><br><span class="line">[tuture-add]        &lt;button class="btn btn-danger" id="btn-delete" data-id="<span class="template-variable">&#123;&#123;image.uniqueId&#125;&#125;</span>"&gt;</span><br><span class="line">[tuture-add]          &lt;i class="fa fa-times"&gt;&lt;/i&gt;</span><br><span class="line">[tuture-add]        &lt;/button&gt;</span><br><span class="line">[tuture-add]      &lt;/div&gt;</span><br><span class="line">[tuture-add]    &lt;/div&gt;</span><br><span class="line">[tuture-add]  &lt;/div&gt;</span><br><span class="line">[tuture-add]&lt;/div&gt;</span><br><span class="line">[tuture-add]</span><br><span class="line">[tuture-add]&lt;div class="panel panel-default"&gt;</span><br><span class="line">[tuture-add]  &lt;div class="panel-heading"&gt;</span><br><span class="line">[tuture-add]    &lt;div class="row"&gt;</span><br><span class="line">[tuture-add]      &lt;div class="col-md-8"&gt;</span><br><span class="line">[tuture-add]        &lt;strong class="panel-title"&gt;评论&lt;/strong&gt;</span><br><span class="line">[tuture-add]      &lt;/div&gt;</span><br><span class="line">[tuture-add]      &lt;div class="col-md-4 text-right"&gt;</span><br><span class="line">[tuture-add]        &lt;button class="btn btn-default btn-sm" id="btn-comment" data-id="<span class="template-variable">&#123;&#123;image.uniqueId&#125;&#125;</span>"&gt;</span><br><span class="line">[tuture-add]          &lt;i class="fa fa-comments-o"&gt; 发表评论...&lt;/i&gt;</span><br><span class="line">[tuture-add]        &lt;/button&gt;</span><br><span class="line">[tuture-add]      &lt;/div&gt;</span><br><span class="line">[tuture-add]    &lt;/div&gt;</span><br><span class="line">[tuture-add]  &lt;/div&gt;</span><br><span class="line">[tuture-add]  &lt;div class="panel-body"&gt;</span><br><span class="line">[tuture-add]    &lt;blockquote id="post-comment"&gt;</span><br><span class="line">[tuture-add]      &lt;div class="row"&gt;</span><br><span class="line">[tuture-add]        &lt;form action="/images/<span class="template-variable">&#123;&#123;image.uniqueId&#125;&#125;</span>/comment" method="post"&gt;</span><br><span class="line">[tuture-add]          &lt;div class="form-group col-sm-12"&gt;</span><br><span class="line">[tuture-add]            &lt;label for="name" class="col-sm-2 control-label"&gt;昵称:&lt;/label&gt;</span><br><span class="line">[tuture-add]            &lt;div class="col-sm-10"&gt;&lt;input type="text" class="form-control" name="name"&gt;&lt;/div&gt;</span><br><span class="line">[tuture-add]          &lt;/div&gt;</span><br><span class="line">[tuture-add]          &lt;div class="form-group col-sm-12"&gt;</span><br><span class="line">[tuture-add]            &lt;label for="email" class="col-sm-2 control-label"&gt;Email:&lt;/label&gt;</span><br><span class="line">[tuture-add]            &lt;div class="col-sm-10"&gt;&lt;input type="text" class="form-control" name="email"&gt;&lt;/div&gt;</span><br><span class="line">[tuture-add]          &lt;/div&gt;</span><br><span class="line">[tuture-add]          &lt;div class="form-group col-sm-12"&gt;</span><br><span class="line">[tuture-add]            &lt;label for="comment" class="col-sm-2 control-label"&gt;评论:&lt;/label&gt;</span><br><span class="line">[tuture-add]            &lt;div class="col-sm-10"&gt;</span><br><span class="line">[tuture-add]              &lt;textarea name="comment" class="form-control" rows="2"&gt;&lt;/textarea&gt;</span><br><span class="line">[tuture-add]            &lt;/div&gt;</span><br><span class="line">[tuture-add]          &lt;/div&gt;</span><br><span class="line">[tuture-add]          &lt;div class="form-group col-sm-12"&gt;</span><br><span class="line">[tuture-add]            &lt;div class="col-sm-12 text-right"&gt;</span><br><span class="line">[tuture-add]              &lt;button class="btn btn-success" id="comment-btn" type="button"&gt;</span><br><span class="line">[tuture-add]                &lt;i class="fa fa-comment"&gt;&lt;/i&gt; 发表</span><br><span class="line">[tuture-add]              &lt;/button&gt;</span><br><span class="line">[tuture-add]            &lt;/div&gt;</span><br><span class="line">[tuture-add]          &lt;/div&gt;</span><br><span class="line">[tuture-add]        &lt;/form&gt;</span><br><span class="line">[tuture-add]      &lt;/div&gt;</span><br><span class="line">[tuture-add]    &lt;/blockquote&gt;</span><br><span class="line">[tuture-add]    &lt;ul class="media-list"&gt;</span><br><span class="line">[tuture-add]      <span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> comments&#125;&#125;</span></span><br><span class="line">[tuture-add]      &lt;li class="media"&gt;</span><br><span class="line">[tuture-add]        &lt;a href="#" class="pull-left"&gt;</span><br><span class="line">[tuture-add]          &lt;img src="http://www.gravatar.com/avatar/<span class="template-variable">&#123;&#123;gravatar&#125;&#125;</span>?d=monsterid&amp;s=45"</span><br><span class="line">[tuture-add]            class="media-object img-circle"&gt;</span><br><span class="line">[tuture-add]        &lt;/a&gt;</span><br><span class="line">[tuture-add]        &lt;div class="media-body"&gt;</span><br><span class="line">[tuture-add]          <span class="template-variable">&#123;&#123;comment&#125;&#125;</span></span><br><span class="line">[tuture-add]          &lt;br/&gt;</span><br><span class="line">[tuture-add]          &lt;strong class="media-heading"&gt;<span class="template-variable">&#123;&#123;name&#125;&#125;</span>&lt;/strong&gt;</span><br><span class="line">[tuture-add]          &lt;small class="text-muted"&gt;<span class="template-variable">&#123;&#123;timestamp&#125;&#125;</span>&lt;/small&gt;</span><br><span class="line">[tuture-add]        &lt;/div&gt;</span><br><span class="line">[tuture-add]      &lt;/li&gt;</span><br><span class="line">[tuture-add]      <span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br><span class="line">[tuture-add]    &lt;/ul&gt;</span><br><span class="line">[tuture-add]  &lt;/div&gt;</span><br><span class="line">[tuture-add]&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在展示所有评论的代码中，我们同样用到了 handlebars 的循环语法，非常方便。</p><p>然后，我们将分别实现网站右边栏中的统计数据、最受欢迎图片和最新评论组件。首先是统计数据组件模板：</p><figure class="highlight handlebars"><figcaption><span>views/partials/stats.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;div class="panel panel-default"&gt;</span><br><span class="line">  &lt;div class="panel-heading"&gt;</span><br><span class="line">    &lt;h3 class="panel-title"&gt;统计数据&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class="panel-body"&gt;</span><br><span class="line">    &lt;div class="row"&gt;</span><br><span class="line">      &lt;div class="col-md-4 text-left"&gt;图片:&lt;/div&gt;</span><br><span class="line">      &lt;div class="col-md-8 text-right"&gt;<span class="template-variable">&#123;&#123;sidebar.stats.images&#125;&#125;</span>&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="row"&gt;</span><br><span class="line">      &lt;div class="col-md-4 text-left"&gt;评论:&lt;/div&gt;</span><br><span class="line">      &lt;div class="col-md-8 text-right"&gt;<span class="template-variable">&#123;&#123;sidebar.stats.comments&#125;&#125;</span>&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="row"&gt;</span><br><span class="line">      &lt;div class="col-md-4 text-left"&gt;浏览:&lt;/div&gt;</span><br><span class="line">      &lt;div class="col-md-8 text-right"&gt;<span class="template-variable">&#123;&#123;sidebar.stats.views&#125;&#125;</span>&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="row"&gt;</span><br><span class="line">      &lt;div class="col-md-4 text-left"&gt;点赞:&lt;/div&gt;</span><br><span class="line">      &lt;div class="col-md-8 text-right"&gt;<span class="template-variable">&#123;&#123;sidebar.stats.likes&#125;&#125;</span>&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>可以看出组件模板和页面模板并没有什么不同，都是一些 HTML 代码再加上数据接口。</p><p>再分别实现最受欢迎图片组件（popular.handlebars）和最新评论组件（comments.handlebars）。</p><figure class="highlight handlebars"><figcaption><span>views/partials/popular.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;div class="panel panel-default"&gt;</span><br><span class="line">  &lt;div class="panel-heading"&gt;</span><br><span class="line">    &lt;h3 class="panel-title"&gt;最受欢迎&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class="panel-body"&gt;</span><br><span class="line">    <span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> sidebar.popular&#125;&#125;</span></span><br><span class="line">      &lt;div class="col-md-4 text-center" style="padding-bottom: .5em;"&gt;</span><br><span class="line">        &lt;a href="/images/<span class="template-variable">&#123;&#123;uniqueId&#125;&#125;</span>"&gt;</span><br><span class="line">          &lt;img src="/public/upload/<span class="template-variable">&#123;&#123;filename&#125;&#125;</span>" style="width: 75px; height: 75px;"</span><br><span class="line">            class="img-thumbnail"&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    <span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight handlebars"><figcaption><span>views/partials/comments.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;div class="panel panel-default"&gt;</span><br><span class="line">  &lt;div class="panel-heading"&gt;</span><br><span class="line">    &lt;h3 class="panel-title"&gt;最新评论&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class="panel-body"&gt;</span><br><span class="line">    &lt;ul class="media-list"&gt;</span><br><span class="line">      <span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> sidebar.comments&#125;&#125;</span></span><br><span class="line">      &lt;li class="media"&gt;</span><br><span class="line">        &lt;a href="/images/<span class="template-variable">&#123;&#123;image.uniqueId&#125;&#125;</span>" class="pull-left"&gt;</span><br><span class="line">          &lt;img src="/public/upload/<span class="template-variable">&#123;&#123;image.filename&#125;&#125;</span>" class="media-object"</span><br><span class="line">            height="45" width="45"&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;div class="media-body"&gt;</span><br><span class="line">          <span class="template-variable">&#123;&#123;comment&#125;&#125;</span>&lt;br/&gt;</span><br><span class="line">          &lt;strong class="media-heading"&gt;<span class="template-variable">&#123;&#123;name&#125;&#125;</span>&lt;/strong&gt;</span><br><span class="line">          &lt;small class="text-muted"&gt;<span class="template-variable">&#123;&#123;timestamp&#125;&#125;</span>&lt;/small&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      <span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>最后，我们在布局模板 layouts/main.handlebars 中加入所有组件模板，加入模板的语法为 <code>{{> component this}}</code>。除此之外，由于我们用到了一些小图标，所以加上 font-awesome 的链接。</p><figure class="highlight handlebars"><figcaption><span>views/layouts/main.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">  &lt;meta charset="UTF-8"&gt;</span><br><span class="line">  &lt;title&gt;Instagrammy&lt;/title&gt;</span><br><span class="line">  &lt;link href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" rel="stylesheet"&gt;</span><br><span class="line">[tuture-add]  &lt;link href="http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css" rel="stylesheet"&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">[tuture-omit]</span><br><span class="line">  &lt;div class="container"&gt;</span><br><span class="line">    &lt;div class="row"&gt;</span><br><span class="line">      &lt;div class="col-sm-8"&gt;<span class="template-variable">&#123;&#123;&#123;body&#125;&#125;</span>&#125;&lt;/div&gt;</span><br><span class="line">[tuture-add]      &lt;div class="col-sm-4"&gt;</span><br><span class="line">[tuture-add]        <span class="template-variable">&#123;&#123;&gt; stats this&#125;&#125;</span></span><br><span class="line">[tuture-add]        <span class="template-variable">&#123;&#123;&gt; popular this&#125;&#125;</span></span><br><span class="line">[tuture-add]        <span class="template-variable">&#123;&#123;&gt; comments this&#125;&#125;</span></span><br><span class="line">[tuture-add]      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在实际开发中，我们可能经常需要调整页面代码。在修改并保存模板后，只需刷新浏览器即可看到界面的变化（但是如果修改服务器代码则需要重新运行服务器）。</p><h2 id="将数据传入模板视图"><a href="#将数据传入模板视图" class="headerlink" title="将数据传入模板视图"></a>将数据传入模板视图</h2><p>如果没有数据传入，那么模板相应的数据部分将全都是空白。在这一步中，我们将用一些假数据来演示如何从控制器将数据传入模板视图。</p><p>首先在 home 控制器中构造一个 <code>viewModel</code> 对象，并在 <code>render</code> 函数中作为第二参数传入。可以看到 <code>viewModel</code> 对象与模板中的数据接口是完全一致的。</p><figure class="highlight js"><figcaption><span>controllers/home.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  index: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">[tuture-del]    res.render(<span class="string">'index'</span>);</span><br><span class="line">[tuture-add]    <span class="keyword">const</span> viewModel = &#123;</span><br><span class="line">[tuture-add]      images: [</span><br><span class="line">[tuture-add]        &#123;</span><br><span class="line">[tuture-add]          uniqueId: <span class="number">1</span>,</span><br><span class="line">[tuture-add]          title: <span class="string">'示例图片1'</span>,</span><br><span class="line">[tuture-add]          description: <span class="string">''</span>,</span><br><span class="line">[tuture-add]          filename: <span class="string">'sample1.jpg'</span>,</span><br><span class="line">[tuture-add]          views: <span class="number">0</span>,</span><br><span class="line">[tuture-add]          likes: <span class="number">0</span>,</span><br><span class="line">[tuture-add]          timestamp: <span class="built_in">Date</span>.now(),</span><br><span class="line">[tuture-add]        &#125;,</span><br><span class="line">[tuture-add]        &#123;</span><br><span class="line">[tuture-add]          uniqueId: <span class="number">2</span>,</span><br><span class="line">[tuture-add]          title: <span class="string">'示例图片2'</span>,</span><br><span class="line">[tuture-add]          description: <span class="string">''</span>,</span><br><span class="line">[tuture-add]          filename: <span class="string">'sample2.jpg'</span>,</span><br><span class="line">[tuture-add]          views: <span class="number">0</span>,</span><br><span class="line">[tuture-add]          likes: <span class="number">0</span>,</span><br><span class="line">[tuture-add]          timestamp: <span class="built_in">Date</span>.now(),</span><br><span class="line">[tuture-add]        &#125;,</span><br><span class="line">[tuture-add]        &#123;</span><br><span class="line">[tuture-add]          uniqueId: <span class="number">3</span>,</span><br><span class="line">[tuture-add]          title: <span class="string">'示例图片3'</span>,</span><br><span class="line">[tuture-add]          description: <span class="string">''</span>,</span><br><span class="line">[tuture-add]          filename: <span class="string">'sample3.jpg'</span>,</span><br><span class="line">[tuture-add]          views: <span class="number">0</span>,</span><br><span class="line">[tuture-add]          likes: <span class="number">0</span>,</span><br><span class="line">[tuture-add]          timestamp: <span class="built_in">Date</span>.now(),</span><br><span class="line">[tuture-add]        &#125;,</span><br><span class="line">[tuture-add]      ],</span><br><span class="line">[tuture-add]    &#125;;</span><br><span class="line">[tuture-add]    res.render(<span class="string">'index'</span>, viewModel);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同理实现 image 控制器。</p><figure class="highlight js"><figcaption><span>controllers/image.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  index: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">[tuture-del]    res.render(<span class="string">'image'</span>);</span><br><span class="line">[tuture-add]    <span class="keyword">const</span> viewModel = &#123;</span><br><span class="line">[tuture-add]      image: &#123;</span><br><span class="line">[tuture-add]        uniqueId: <span class="number">1</span>,</span><br><span class="line">[tuture-add]        title: <span class="string">'示例图片1'</span>,</span><br><span class="line">[tuture-add]        description: <span class="string">'这是张测试图片'</span>,</span><br><span class="line">[tuture-add]        filename: <span class="string">'sample1.jpg'</span>,</span><br><span class="line">[tuture-add]        views: <span class="number">0</span>,</span><br><span class="line">[tuture-add]        likes: <span class="number">0</span>,</span><br><span class="line">[tuture-add]        timestamp: <span class="built_in">Date</span>.now(),</span><br><span class="line">[tuture-add]      &#125;,</span><br><span class="line">[tuture-add]      comments: [</span><br><span class="line">[tuture-add]        &#123;</span><br><span class="line">[tuture-add]          image_id: <span class="number">1</span>,</span><br><span class="line">[tuture-add]          email: <span class="string">'test@testing.com'</span>,</span><br><span class="line">[tuture-add]          name: <span class="string">'Test Tester'</span>,</span><br><span class="line">[tuture-add]          comment: <span class="string">'Test 1'</span>,</span><br><span class="line">[tuture-add]          timestamp: <span class="built_in">Date</span>.now(),</span><br><span class="line">[tuture-add]        &#125;,</span><br><span class="line">[tuture-add]        &#123;</span><br><span class="line">[tuture-add]          image_id: <span class="number">1</span>,</span><br><span class="line">[tuture-add]          email: <span class="string">'test@testing.com'</span>,</span><br><span class="line">[tuture-add]          name: <span class="string">'Test Tester'</span>,</span><br><span class="line">[tuture-add]          comment: <span class="string">'Test 2'</span>,</span><br><span class="line">[tuture-add]          timestamp: <span class="built_in">Date</span>.now(),</span><br><span class="line">[tuture-add]        &#125;,</span><br><span class="line">[tuture-add]      ],</span><br><span class="line">[tuture-add]    &#125;;</span><br><span class="line">[tuture-add]    res.render(<span class="string">'image'</span>, viewModel);</span><br><span class="line">  &#125;,</span><br><span class="line">  create: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'The image:create POST controller'</span>);</span><br></pre></td></tr></table></figure><p>在传入数据时，我们可以自定义一些 helper 函数在模板中使用。例如 timestamp 时间戳，<code>Date.now()</code> 返回的是一串数字，显然用户体验很不友好，因此我们需要将其转换为方便用户阅读的时间，例如“几秒前”“两小时前”。这里我们选用 JavaScript 最流行的处理时间的库 <a href="http://momentjs.cn/" target="_blank" rel="noopener">moment.js</a>，并通过 npm 安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install moment</span><br></pre></td></tr></table></figure><p>然后在 server/configure.js 中配置 handlebars 的 helper 函数 <code>timeago</code>：</p><figure class="highlight js"><figcaption><span>server/configure.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">const</span> methodOverride = <span class="built_in">require</span>(<span class="string">'method-override'</span>);</span><br><span class="line"><span class="keyword">const</span> errorHandler = <span class="built_in">require</span>(<span class="string">'errorhandler'</span>);</span><br><span class="line">[tuture-add]<span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">'./routes'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">[tuture-del]  app.engine(<span class="string">'handlebars'</span>, exphbs());</span><br><span class="line">[tuture-add]  <span class="comment">// 定义 moment 全局语言</span></span><br><span class="line">[tuture-add]  moment.locale(<span class="string">'zh-cn'</span>);</span><br><span class="line">[tuture-add]</span><br><span class="line">[tuture-add]  app.engine(</span><br><span class="line">[tuture-add]    <span class="string">'handlebars'</span>,</span><br><span class="line">[tuture-add]    exphbs.create(&#123;</span><br><span class="line">[tuture-add]      helpers: &#123;</span><br><span class="line">[tuture-add]        timeago: <span class="function"><span class="keyword">function</span>(<span class="params">timestamp</span>) </span>&#123;</span><br><span class="line">[tuture-add]          <span class="keyword">return</span> moment(timestamp).startOf(<span class="string">'minute'</span>).fromNow();</span><br><span class="line">[tuture-add]        &#125;,</span><br><span class="line">[tuture-add]      &#125;,</span><br><span class="line">[tuture-add]    &#125;).engine,</span><br><span class="line">[tuture-add]  );</span><br><span class="line">  app.set(<span class="string">'view engine'</span>, <span class="string">'handlebars'</span>);</span><br><span class="line"></span><br><span class="line">  app.use(morgan(<span class="string">'dev'</span>));</span><br></pre></td></tr></table></figure><p><code>timeago</code> 函数能够在模板中使用，将原始的 UNIX 时间戳转换为易于理解的中文时间戳。</p><p>接着在相应用到时间戳的地方加入 <code>timeago</code> 函数：</p><figure class="highlight handlebars"><figcaption><span>views/image.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">        &lt;strong class="likes-count"&gt;<span class="template-variable">&#123;&#123;image.likes&#125;&#125;</span>&lt;/strong&gt; &amp;nbsp; - &amp;nbsp;</span><br><span class="line">        &lt;i class="fa fa-eye"&gt;&lt;/i&gt;</span><br><span class="line">        &lt;strong&gt;<span class="template-variable">&#123;&#123;image.views&#125;&#125;</span>&lt;/strong&gt;</span><br><span class="line">[tuture-del]        &amp;nbsp; - &amp;nbsp; 发表于: &lt;em class="text-muted"&gt;<span class="template-variable">&#123;&#123;image.timestamp&#125;&#125;</span>&lt;/em&gt;</span><br><span class="line">[tuture-add]        &amp;nbsp; - &amp;nbsp; 发表于: &lt;em class="text-muted"&gt;<span class="template-variable">&#123;&#123;timeago image.timestamp&#125;&#125;</span>&lt;/em&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class="col-md-4 text-right"&gt;</span><br><span class="line">        &lt;button class="btn btn-danger" id="btn-delete" data-id="<span class="template-variable">&#123;&#123;image.uniqueId&#125;&#125;</span>"&gt;</span><br><span class="line">[tuture-omit]</span><br><span class="line">          <span class="template-variable">&#123;&#123;comment&#125;&#125;</span></span><br><span class="line">          &lt;br/&gt;</span><br><span class="line">          &lt;strong class="media-heading"&gt;<span class="template-variable">&#123;&#123;name&#125;&#125;</span>&lt;/strong&gt;</span><br><span class="line">[tuture-del]          &lt;small class="text-muted"&gt;<span class="template-variable">&#123;&#123;timestamp&#125;&#125;</span>&lt;/small&gt;</span><br><span class="line">[tuture-add]          &lt;small class="text-muted"&gt;<span class="template-variable">&#123;&#123;timeago timestamp&#125;&#125;</span>&lt;/small&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      <span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight handlebars"><figcaption><span>views/partials/comments.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">        &lt;div class="media-body"&gt;</span><br><span class="line">          <span class="template-variable">&#123;&#123;comment&#125;&#125;</span>&lt;br/&gt;</span><br><span class="line">          &lt;strong class="media-heading"&gt;<span class="template-variable">&#123;&#123;name&#125;&#125;</span>&lt;/strong&gt;</span><br><span class="line">[tuture-del]          &lt;small class="text-muted"&gt;<span class="template-variable">&#123;&#123;timestamp&#125;&#125;</span>&lt;/small&gt;</span><br><span class="line">[tuture-add]          &lt;small class="text-muted"&gt;<span class="template-variable">&#123;&#123;timeago timestamp&#125;&#125;</span>&lt;/small&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      <span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>至此，本系列教程的第一部分就已经完成了，MVC 我们实现了 V（视图）和 C （控制器）。在后续教程中，我们将接入 MongoDB 数据库用于网站数据的存取，并进一步实现图片上传、点赞和删除，以及添加评论等功能。</p>]]></content>
    
    <summary type="html">
    
      在这篇教程中，我们将用 Node.js 中最流行的 Express 框架搭建一个类似 Instagram 的图片分享社区，数据库选用 MongoDB。本教程的代码改编自 Mithun Satheesh，Bruno Joseph D&#39;mello 和 Jason Krol 的《Web Development with MongoDB and NodeJS: Second Edition》一书。
    
    </summary>
    
    
    
      <category term="Node" scheme="https://tuture.co/tags/Node/"/>
    
      <category term="MongoDB" scheme="https://tuture.co/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>从零开始用 Express + MongoDB 搭建图片分享社区（二）</title>
    <link href="https://tuture.co/2019/10/13/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%94%A8%20Express%20+%20MongoDB%20%E6%90%AD%E5%BB%BA%E5%9B%BE%E7%89%87%E5%88%86%E4%BA%AB%E7%A4%BE%E5%8C%BA%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://tuture.co/2019/10/13/从零开始用 Express + MongoDB 搭建图片分享社区（二）/</id>
    <published>2019-10-13T09:45:06.335Z</published>
    <updated>2019-10-13T09:45:06.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现图片上传功能"><a href="#实现图片上传功能" class="headerlink" title="实现图片上传功能"></a>实现图片上传功能</h2><p>第一步，我们先实现图片上传功能。创建 <code>public/upload</code> 文件夹，用于存放用户上传的图片：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p public/upload</span><br></pre></td></tr></table></figure><p>然后安装 multer 中间件用于处理文件上传：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install multer</span><br></pre></td></tr></table></figure><p>在 server/routes.js 模块中，我们初始化 multer 中间件，然后将其添加到上传图片的路由中（即 <code>POST /images</code>）：</p><figure class="highlight js"><figcaption><span>server/routes.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line">[tuture-add]<span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line">[tuture-add]<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line">[tuture-add]<span class="keyword">const</span> upload = multer(&#123; <span class="attr">dest</span>: path.join(__dirname, <span class="string">'public/upload/temp'</span>) &#125;);</span><br><span class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">'../controllers/home'</span>);</span><br><span class="line"><span class="keyword">const</span> image = <span class="built_in">require</span>(<span class="string">'../controllers/image'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  router.get(<span class="string">'/'</span>, home.index);</span><br><span class="line">  router.get(<span class="string">'/images/:image_id'</span>, image.index);</span><br><span class="line">[tuture-del]  router.post(<span class="string">'/images'</span>, image.create);</span><br><span class="line">[tuture-add]  router.post(<span class="string">'/images'</span>, upload.single(<span class="string">'file'</span>), image.create);</span><br><span class="line">  router.post(<span class="string">'/images/:image_id/like'</span>, image.like);</span><br><span class="line">  router.post(<span class="string">'/images/:image_id/comment'</span>, image.comment);</span><br><span class="line">  app.use(router);</span><br></pre></td></tr></table></figure><p>上述代码有两点需要讲解：</p><ul><li>第 6 行，在初始化 <code>upload</code> 中间件时，传入 <code>dest</code> 选项指定保存上传文件的路径，这里我们选择在 public/upload 目录中再创建一个 temp 目录用于临时保存上传到的图片；</li><li>第 14 行，<code>router.post</code> 除第一个参数为 URL，后面可以跟任意多个中间件，这里我们将上传文件的中间件添加到 <code>image.create</code> 控制器的前面，确保先处理用户上传的文件。这里 <code>upload.single(&#39;file&#39;)</code> 表示只处理单个上传文件，并且字段名为 <code>file</code>，在后续中间件中就可以通过 <code>req.file</code> 进行获取。</li></ul><p>关于 multer 的详细用法，可以参考其<a href="https://github.com/expressjs/multer" target="_blank" rel="noopener">文档</a>。</p><p>在配置好上传文件的中间件后，相应地在控制器中加入获取并保存图片的代码：</p><figure class="highlight js"><figcaption><span>controllers/image.js</span></figcaption><table><tr><td class="code"><pre><span class="line">[tuture-add]<span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">[tuture-add]<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">[tuture-add]</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  index: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> viewModel = &#123;</span><br><span class="line">[tuture-omit]</span><br><span class="line">    res.render(<span class="string">'image'</span>, viewModel);</span><br><span class="line">  &#125;,</span><br><span class="line">  create: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">[tuture-del]    res.send(<span class="string">'The image:create POST controller'</span>);</span><br><span class="line">[tuture-add]    <span class="keyword">var</span> tempPath = req.file.path;</span><br><span class="line">[tuture-add]    <span class="keyword">var</span> imgUrl = req.file.filename;</span><br><span class="line">[tuture-add]    <span class="keyword">var</span> ext = path.extname(req.file.originalname).toLowerCase();</span><br><span class="line">[tuture-add]    <span class="keyword">var</span> targetPath = path.resolve(<span class="string">'./public/upload/'</span> + imgUrl + ext);</span><br><span class="line">[tuture-add]</span><br><span class="line">[tuture-add]    <span class="keyword">if</span> (ext === <span class="string">'.png'</span> || ext === <span class="string">'.jpg'</span> || ext === <span class="string">'.jpeg'</span> || ext === <span class="string">'.gif'</span>) &#123;</span><br><span class="line">[tuture-add]      fs.rename(tempPath, targetPath, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">[tuture-add]        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">[tuture-add]        res.redirect(<span class="string">'/images/'</span> + imgUrl);</span><br><span class="line">[tuture-add]      &#125;);</span><br><span class="line">[tuture-add]    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">[tuture-add]      fs.unlink(tempPath, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">[tuture-add]        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">[tuture-add]        res.json(<span class="number">500</span>, &#123; <span class="attr">error</span>: <span class="string">'只允许上传图片文件.'</span> &#125;);</span><br><span class="line">[tuture-add]      &#125;);</span><br><span class="line">[tuture-add]    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  like: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'The image:like POST controller'</span>);</span><br></pre></td></tr></table></figure><p><code>req.file</code> 是一个 Multer 文件对象，包括 <code>path</code>（上传到服务器的路径）、<code>filename</code>（服务器存储的文件名）和 <code>originalname</code>（文件初始名，即保存在客户端的文件名）等有用的属性。我截取了一张输出 <code>req.file</code> 所有字段的图片如下：</p><p><img src="https://raw.githubusercontent.com/mRcfps/Instagrammy/master/tuture-assets/figure-4.png" alt></p><p>这里我们通过简单的后缀匹配来判断用户上传的是否为图片，如果是，则从临时目录 <code>tempPath</code> 存放到上传目录 <code>targetPath</code> 中，否则直接删除。上传成功后，通过 <code>res.redirect</code> 将页面重定向到刚刚上传的图片的详情页面。</p><h2 id="接入-MongoDB-数据库"><a href="#接入-MongoDB-数据库" class="headerlink" title="接入 MongoDB 数据库"></a>接入 MongoDB 数据库</h2><p>在上一步中，我们实现了文件上传，但是有一个很糟糕的问题：我们没有去记录上传了哪些图片，还有相应的信息（例如上传时间）。当我们关闭服务器再打开时，整个网站仿佛一下子“失忆”了。解决数据持久化存储最流行的方案无疑是数据库，而 MongoDB 凭借其优异的性能、可扩展性和灵活的数据模式，从众多数据库产品中脱颖而出。并且，MongoDB 的核心功能是基于 BSON（Binary JSON）实现的，甚至提供了 JavaScript Shell，因此在 Node 社区更是深受欢迎。所以，我们也将利用 MongoDB 实现 Instagrammy 的数据持久化存储。MongoDB 可以从其<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">官网</a>上下载。下载并安装好之后，新打开一个终端（命令控制台），运行以下命令打开数据库（Windows 用户可以搜索 mongo.exe 并打开）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mongod</span><br></pre></td></tr></table></figure><p>然后我们安装 Mongoose 这个 npm 包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install mongoose</span><br></pre></td></tr></table></figure><p>Mongoose 是 MongoDB 最流行的 ODM（Object Document Mapping，对象文档映射），使用起来要比底层的 MongoDB Node 驱动更方便。</p><p>我们首先实现图片有关的数据模型。创建 models 目录，在其中添加 image.js 模块，并添加实现 <code>ImageSchema</code> 的代码：</p><figure class="highlight js"><figcaption><span>models/image.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ImageSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  title: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">  description: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">  filename: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">  views: &#123; <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  likes: &#123; <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  timestamp: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ImageSchema.virtual(<span class="string">'uniqueId'</span>).get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.filename.replace(path.extname(<span class="keyword">this</span>.filename), <span class="string">''</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'Image'</span>, ImageSchema);</span><br></pre></td></tr></table></figure><p>我们在第 6 行到第 13 行定义了一个 <code>Schema</code>，即数据对象的模式，描述了这个模型的所有字段及相应的属性。这里我们为 <code>ImageSchema</code> 定义了六个字段，每个字段都有其类型（必须），<code>views</code>、<code>likes</code> 和 <code>timestamp</code> 还有相应的默认值（可选）。除了普通字段外，我们还定义了<strong><em>虚字段</em></strong><code>uniqueId</code>。虚字段（virtuals）和普通字段的最大区别是不会保存到数据库中，而是在每次查询时临时计算，通常用于对普通字段进行格式调整或组合。在 <code>Schema</code> 定义完成后，我们将其编译为名为 <code>Image</code> 的模型并导出，方便在控制器中进行使用。</p><p>接着我们在 home 控制器中调用 <code>ImageModel</code> 来从数据库中获取全部图片：</p><figure class="highlight js"><figcaption><span>controllers/home.js</span></figcaption><table><tr><td class="code"><pre><span class="line">[tuture-add]<span class="keyword">const</span> ImageModel = <span class="built_in">require</span>(<span class="string">'../models/image'</span>);</span><br><span class="line">[tuture-add]</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  index: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">[tuture-del]    <span class="keyword">const</span> viewModel = &#123;</span><br><span class="line">[tuture-del]      images: [</span><br><span class="line">[tuture-del]        &#123;</span><br><span class="line">[tuture-del]          uniqueId: <span class="number">1</span>,</span><br><span class="line">[tuture-del]          title: <span class="string">'示例图片1'</span>,</span><br><span class="line">[tuture-del]          description: <span class="string">''</span>,</span><br><span class="line">[tuture-del]          filename: <span class="string">'sample1.jpg'</span>,</span><br><span class="line">[tuture-del]          views: <span class="number">0</span>,</span><br><span class="line">[tuture-del]          likes: <span class="number">0</span>,</span><br><span class="line">[tuture-del]          timestamp: <span class="built_in">Date</span>.now(),</span><br><span class="line">[tuture-del]        &#125;,</span><br><span class="line">[tuture-del]        &#123;</span><br><span class="line">[tuture-del]          uniqueId: <span class="number">2</span>,</span><br><span class="line">[tuture-del]          title: <span class="string">'示例图片2'</span>,</span><br><span class="line">[tuture-del]          description: <span class="string">''</span>,</span><br><span class="line">[tuture-del]          filename: <span class="string">'sample2.jpg'</span>,</span><br><span class="line">[tuture-del]          views: <span class="number">0</span>,</span><br><span class="line">[tuture-del]          likes: <span class="number">0</span>,</span><br><span class="line">[tuture-del]          timestamp: <span class="built_in">Date</span>.now(),</span><br><span class="line">[tuture-del]        &#125;,</span><br><span class="line">[tuture-del]        &#123;</span><br><span class="line">[tuture-del]          uniqueId: <span class="number">3</span>,</span><br><span class="line">[tuture-del]          title: <span class="string">'示例图片3'</span>,</span><br><span class="line">[tuture-del]          description: <span class="string">''</span>,</span><br><span class="line">[tuture-del]          filename: <span class="string">'sample3.jpg'</span>,</span><br><span class="line">[tuture-del]          views: <span class="number">0</span>,</span><br><span class="line">[tuture-del]          likes: <span class="number">0</span>,</span><br><span class="line">[tuture-del]          timestamp: <span class="built_in">Date</span>.now(),</span><br><span class="line">[tuture-del]        &#125;,</span><br><span class="line">[tuture-del]      ],</span><br><span class="line">[tuture-del]    &#125;;</span><br><span class="line">[tuture-del]    res.render(<span class="string">'index'</span>, viewModel);</span><br><span class="line">[tuture-add]    <span class="keyword">const</span> viewModel = &#123; <span class="attr">images</span>: [] &#125;;</span><br><span class="line">[tuture-add]</span><br><span class="line">[tuture-add]    ImageModel.find(&#123;&#125;, &#123;&#125;, &#123; <span class="attr">sort</span>: &#123; <span class="attr">timestamp</span>: <span class="number">-1</span> &#125; &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, images</span>) </span>&#123;</span><br><span class="line">[tuture-add]      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">[tuture-add]      viewModel.images = images;</span><br><span class="line">[tuture-add]      res.render(<span class="string">'index'</span>, viewModel);</span><br><span class="line">[tuture-add]    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在第 39 行中，我们用 <code>find</code> 方法查询图片，所有的查询方法可参考 <a href="https://cn.mongoosedoc.top/docs/queries.html" target="_blank" rel="noopener">Mongoose 中文文档</a>。<code>find</code> 是查询多条数据记录的通用方法，其四个参数如下：</p><ul><li><code>filter</code>：过滤器，是一个 JavaScript 对象，例如 <code>{ name: 'john' }</code> 则限定返回所有名字为 john 的记录，这里我们用 <code>{}</code> 表示查询所有记录；</li><li><code>projection</code>（可选）：查询所返回的字段，可以是对象或字符串，我们用 <code>{}</code> 表示返回所有字段；</li><li><code>options</code>（可选）：查询操作的选项，用来指定查询操作的一些参数，比如我们用 <code>sort</code> 选项对返回结果进行排序（这里按照发布时间 <code>timestamp</code> 进行倒序排列，即把最新发布的放在最前面）；</li><li><code>callback</code>：回调函数，用于添加在查询完毕时的业务逻辑。</li></ul><p>MongoDB 的查询灵活而强大，但这也意味着一定的学习成本。</p><p>进一步，我们在 image 控制器中添加数据库操作的代码：</p><figure class="highlight js"><figcaption><span>controllers/image.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">[tuture-add]<span class="keyword">const</span> ImageModel = <span class="built_in">require</span>(<span class="string">'../models/image'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  index: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">[tuture-del]    <span class="keyword">const</span> viewModel = &#123;</span><br><span class="line">[tuture-del]      image: &#123;</span><br><span class="line">[tuture-del]        uniqueId: <span class="number">1</span>,</span><br><span class="line">[tuture-del]        title: <span class="string">'示例图片1'</span>,</span><br><span class="line">[tuture-del]        description: <span class="string">'这是张测试图片'</span>,</span><br><span class="line">[tuture-del]        filename: <span class="string">'sample1.jpg'</span>,</span><br><span class="line">[tuture-del]        views: <span class="number">0</span>,</span><br><span class="line">[tuture-del]        likes: <span class="number">0</span>,</span><br><span class="line">[tuture-del]        timestamp: <span class="built_in">Date</span>.now(),</span><br><span class="line">[tuture-del]      &#125;,</span><br><span class="line">[tuture-del]      comments: [</span><br><span class="line">[tuture-del]        &#123;</span><br><span class="line">[tuture-del]          image_id: <span class="number">1</span>,</span><br><span class="line">[tuture-del]          email: <span class="string">'test@testing.com'</span>,</span><br><span class="line">[tuture-del]          name: <span class="string">'Test Tester'</span>,</span><br><span class="line">[tuture-del]          comment: <span class="string">'Test 1'</span>,</span><br><span class="line">[tuture-del]          timestamp: <span class="built_in">Date</span>.now(),</span><br><span class="line">[tuture-del]        &#125;,</span><br><span class="line">[tuture-del]        &#123;</span><br><span class="line">[tuture-del]          image_id: <span class="number">1</span>,</span><br><span class="line">[tuture-del]          email: <span class="string">'test@testing.com'</span>,</span><br><span class="line">[tuture-del]          name: <span class="string">'Test Tester'</span>,</span><br><span class="line">[tuture-del]          comment: <span class="string">'Test 2'</span>,</span><br><span class="line">[tuture-del]          timestamp: <span class="built_in">Date</span>.now(),</span><br><span class="line">[tuture-del]        &#125;,</span><br><span class="line">[tuture-del]      ],</span><br><span class="line">[tuture-del]    &#125;;</span><br><span class="line">[tuture-del]    res.render(<span class="string">'image'</span>, viewModel);</span><br><span class="line">[tuture-add]    <span class="keyword">const</span> viewModel = &#123; <span class="attr">image</span>: &#123;&#125;, <span class="attr">comments</span>: [] &#125;;</span><br><span class="line">[tuture-add]</span><br><span class="line">[tuture-add]    ImageModel.findOne(&#123; <span class="attr">filename</span>: &#123; <span class="attr">$regex</span>: req.params.image_id &#125; &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]      err,</span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]      image,</span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]    </span>) </span>&#123;</span><br><span class="line">[tuture-add]      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">[tuture-add]      <span class="keyword">if</span> (image) &#123;</span><br><span class="line">[tuture-add]        <span class="comment">// 增加该图片的访问量</span></span><br><span class="line">[tuture-add]        image.views += <span class="number">1</span>;</span><br><span class="line">[tuture-add]        viewModel.image = image;</span><br><span class="line">[tuture-add]        image.save();</span><br><span class="line">[tuture-add]        res.render(<span class="string">'image'</span>, viewModel);</span><br><span class="line">[tuture-add]      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">[tuture-add]        res.redirect(<span class="string">'/'</span>);</span><br><span class="line">[tuture-add]      &#125;</span><br><span class="line">[tuture-add]    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  create: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tempPath = req.file.path;</span><br><span class="line">[tuture-omit]</span><br><span class="line">    <span class="keyword">if</span> (ext === <span class="string">'.png'</span> || ext === <span class="string">'.jpg'</span> || ext === <span class="string">'.jpeg'</span> || ext === <span class="string">'.gif'</span>) &#123;</span><br><span class="line">      fs.rename(tempPath, targetPath, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">[tuture-del]        res.redirect(<span class="string">'/images/'</span> + imgUrl);</span><br><span class="line">[tuture-add]        <span class="keyword">const</span> newImg = <span class="keyword">new</span> ImageModel(&#123;</span><br><span class="line">[tuture-add]          title: req.body.title,</span><br><span class="line">[tuture-add]          description: req.body.description,</span><br><span class="line">[tuture-add]          filename: imgUrl + ext,</span><br><span class="line">[tuture-add]        &#125;);</span><br><span class="line">[tuture-add]        newImg.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, image</span>) </span>&#123;</span><br><span class="line">[tuture-add]          <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">[tuture-add]          res.redirect(<span class="string">'/images/'</span> + image.uniqueId);</span><br><span class="line">[tuture-add]        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fs.unlink(tempPath, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br></pre></td></tr></table></figure><p>在 <code>image.index</code> 和 <code>image.create</code> 两个控制器中，我们分别进行了单条数据记录的查询和插入。<code>findOne</code> 与之前的 <code>find</code> 参数格式完全一致，只不过仅返回一条数据。在插入新数据时，先创建一个 <code>ImageModel</code> 实例，然后再调用 <code>save</code> 方法进行保存即可。</p><p>最后，我们需要在服务器刚刚运行时就连接好数据库，因此在 server.js 中添加如下代码：</p><figure class="highlight js"><figcaption><span>server.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line">[tuture-add]<span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> configure = <span class="built_in">require</span>(<span class="string">'./server/configure'</span>);</span><br><span class="line"></span><br><span class="line">app = express();</span><br><span class="line">app = configure(app);</span><br><span class="line">[tuture-add]</span><br><span class="line">[tuture-add]<span class="comment">// 建立数据库连接</span></span><br><span class="line">[tuture-add]mongoose.connect(<span class="string">'mongodb://localhost/instagrammy'</span>);</span><br><span class="line">[tuture-add]mongoose.connection.on(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">[tuture-add]  <span class="built_in">console</span>.log(<span class="string">'Mongoose connected.'</span>);</span><br><span class="line">[tuture-add]&#125;);</span><br><span class="line">[tuture-add]</span><br><span class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br></pre></td></tr></table></figure><p>到了这一步，我们运行 <code>node server.js</code> 运行服务器（确保 MongoDB 数据库已经在运行！），尝试上传图片，可以发现不仅能上传成功，还可以在首页看到新添加的图片了！</p><h2 id="实现评论功能"><a href="#实现评论功能" class="headerlink" title="实现评论功能"></a>实现评论功能</h2><p>类似地，我们进一步实现网站的评论功能。按照 MVC 模式，我们将依次实现评论的模型（M）、视图（V）和控制器（C）。</p><p>首先，仿照 models/image.js，我们实现评论的数据模型：</p><figure class="highlight js"><figcaption><span>models/comment.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="keyword">const</span> ObjectId = Schema.ObjectId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CommentSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  image_id: &#123; <span class="attr">type</span>: ObjectId &#125;,</span><br><span class="line">  email: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">  name: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">  gravatar: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">  comment: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">  timestamp: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CommentSchema.virtual(<span class="string">'image'</span>)</span><br><span class="line">  .set(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._image = image;</span><br><span class="line">  &#125;)</span><br><span class="line">  .get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._image;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'Comment'</span>, CommentSchema);</span><br></pre></td></tr></table></figure><p><code>CommentSchema</code> 有两个字段需要补充说明一下：</p><ul><li><code>image_id</code>：由于图片和评论是一对多的关系（即一张图片包括多个评论），因此我们需要在记录每个评论所属的图片，即通过 <code>image_id</code> 字段进行记录；</li><li><code>gravatar</code>：用 MD5 对电子邮箱加密后得到的字符串，用于访问 <a href="https://gravatar.com" target="_blank" rel="noopener">Gravatar</a> 服务。Gravatar 提供了跨网站的头像服务，如果你在集成了 Gravatar 服务的网站通过邮箱注册并上传了头像，那么别的网站也可以通过 Gravatar 访问你的头像。这里请通过 <code>npm install md5</code> 安装 MD5 加密的包。</li></ul><p>我们对评论有关的界面代码进行细微的调整，将提交按钮的 <code>type</code> 从 <code>button</code> 改为 <code>submit</code>：</p><figure class="highlight handlebars"><figcaption><span>views/image.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class="form-group col-sm-12"&gt;</span><br><span class="line">            &lt;div class="col-sm-12 text-right"&gt;</span><br><span class="line">[tuture-del]              &lt;button class="btn btn-success" id="comment-btn" type="button"&gt;</span><br><span class="line">[tuture-add]              &lt;button class="btn btn-success" id="comment-btn" type="submit"&gt;</span><br><span class="line">                &lt;i class="fa fa-comment"&gt;&lt;/i&gt; 发表</span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>最后是评论有关的 controller 代码。包括在 <code>image.comment</code> 中实现创建评论，以及在 <code>image.index</code> 中实现对单张图片所有评论的查询：</p><figure class="highlight js"><figcaption><span>controllers/image.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">[tuture-add]<span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">'md5'</span>);</span><br><span class="line"><span class="keyword">const</span> ImageModel = <span class="built_in">require</span>(<span class="string">'../models/image'</span>);</span><br><span class="line">[tuture-add]<span class="keyword">const</span> CommentModel = <span class="built_in">require</span>(<span class="string">'../models/comment'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  index: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">[tuture-omit]</span><br><span class="line">        image.views += <span class="number">1</span>;</span><br><span class="line">        viewModel.image = image;</span><br><span class="line">        image.save();</span><br><span class="line">[tuture-del]        res.render(<span class="string">'image'</span>, viewModel);</span><br><span class="line">[tuture-add]</span><br><span class="line">[tuture-add]        CommentModel.find(</span><br><span class="line">[tuture-add]          &#123; <span class="attr">image_id</span>: image._id &#125;,</span><br><span class="line">[tuture-add]          &#123;&#125;,</span><br><span class="line">[tuture-add]          &#123; <span class="attr">sort</span>: &#123; <span class="attr">timestamp</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">[tuture-add]          <span class="function"><span class="keyword">function</span>(<span class="params">err, comments</span>) </span>&#123;</span><br><span class="line">[tuture-add]            <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">[tuture-add]            viewModel.comments = comments;</span><br><span class="line">[tuture-add]            res.render(<span class="string">'image'</span>, viewModel);</span><br><span class="line">[tuture-add]          &#125;,</span><br><span class="line">[tuture-add]        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.redirect(<span class="string">'/'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">[tuture-omit]</span><br><span class="line">    res.send(<span class="string">'The image:like POST controller'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  comment: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">[tuture-del]    res.send(<span class="string">'The image:comment POST controller'</span>);</span><br><span class="line">[tuture-add]    ImageModel.findOne(&#123; <span class="attr">filename</span>: &#123; <span class="attr">$regex</span>: req.params.image_id &#125; &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]      err,</span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]      image,</span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]    </span>) </span>&#123;</span><br><span class="line">[tuture-add]      <span class="keyword">if</span> (!err &amp;&amp; image) &#123;</span><br><span class="line">[tuture-add]        <span class="keyword">const</span> newComment = <span class="keyword">new</span> CommentModel(req.body);</span><br><span class="line">[tuture-add]        newComment.gravatar = md5(newComment.email);</span><br><span class="line">[tuture-add]        newComment.image_id = image._id;</span><br><span class="line">[tuture-add]        newComment.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, comment</span>) </span>&#123;</span><br><span class="line">[tuture-add]          <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">[tuture-add]          res.redirect(<span class="string">'/images/'</span> + image.uniqueId + <span class="string">'#'</span> + comment._id);</span><br><span class="line">[tuture-add]        &#125;);</span><br><span class="line">[tuture-add]      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">[tuture-add]        res.redirect(<span class="string">'/'</span>);</span><br><span class="line">[tuture-add]      &#125;</span><br><span class="line">[tuture-add]    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>查询与创建评论的代码和之前操作图片的代码大部分都是一致的，最大的差别在于查询时需要根据所属的图片 ID，创建时需要记录图片的 ID。这里我们约定使用 MongoDB 为每一条数据默认创建的 <code>_id</code> 字段。</p><h2 id="实现图片的点赞和删除"><a href="#实现图片的点赞和删除" class="headerlink" title="实现图片的点赞和删除"></a>实现图片的点赞和删除</h2><p>这一步中，我们将实现图片的点赞和删除。</p><p>首先在控制器中添加点赞和删除的代码：</p><figure class="highlight js"><figcaption><span>controllers/image.js</span></figcaption><table><tr><td class="code"><pre><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  like: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">[tuture-del]    res.send(<span class="string">'The image:like POST controller'</span>);</span><br><span class="line">[tuture-add]    ImageModel.findOne(&#123; <span class="attr">filename</span>: &#123; <span class="attr">$regex</span>: req.params.image_id &#125; &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]      err,</span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]      image,</span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]    </span>) </span>&#123;</span><br><span class="line">[tuture-add]      <span class="keyword">if</span> (!err &amp;&amp; image) &#123;</span><br><span class="line">[tuture-add]        image.likes += <span class="number">1</span>;</span><br><span class="line">[tuture-add]        image.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">[tuture-add]          <span class="keyword">if</span> (err) res.json(err);</span><br><span class="line">[tuture-add]          <span class="keyword">else</span> res.json(&#123; <span class="attr">likes</span>: image.likes &#125;);</span><br><span class="line">[tuture-add]        &#125;);</span><br><span class="line">[tuture-add]      &#125;</span><br><span class="line">[tuture-add]    &#125;);</span><br><span class="line">[tuture-add]  &#125;,</span><br><span class="line">[tuture-add]  remove: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">[tuture-add]    ImageModel.findOne(&#123; <span class="attr">filename</span>: &#123; <span class="attr">$regex</span>: req.params.image_id &#125; &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]      err,</span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]      image,</span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]    </span>) </span>&#123;</span><br><span class="line">[tuture-add]      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">[tuture-add]      fs.unlink(path.resolve(<span class="string">'./public/upload/'</span> + image.filename), <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]        err,</span></span></span><br><span class="line"><span class="function"><span class="params">[tuture-add]      </span>) </span>&#123;</span><br><span class="line">[tuture-add]        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">[tuture-add]        CommentModel.remove(&#123; <span class="attr">image_id</span>: image._id &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">[tuture-add]          image.remove(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">[tuture-add]            <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">[tuture-add]              res.json(<span class="literal">true</span>);</span><br><span class="line">[tuture-add]            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">[tuture-add]              res.json(<span class="literal">false</span>);</span><br><span class="line">[tuture-add]            &#125;</span><br><span class="line">[tuture-add]          &#125;);</span><br><span class="line">[tuture-add]        &#125;);</span><br><span class="line">[tuture-add]      &#125;);</span><br><span class="line">[tuture-add]    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  comment: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    ImageModel.findOne(&#123; <span class="attr">filename</span>: &#123; <span class="attr">$regex</span>: req.params.image_id &#125; &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br></pre></td></tr></table></figure><p>在两个控制器中，我们都按照<strong><em>查询-&gt;修改-&gt;保存</em></strong>的流程进行操作。不过在删除图片中，我们不仅先删除上传图片，再删除了此图片所有的评论模型，最后再删除数据库中的图片模型，这一切通过 <code>Model.remove</code> 方法都可以轻松实现。<code>remove</code> 的使用方法与之前的 <code>find</code> 几乎一模一样，只不过 <code>find</code> 会返回符合条件的结果，而 <code>remove</code> 则会直接将符合条件的记录从数据库中删除。</p><p>我们在路由模块 server/routes.js 中添加刚刚写好的 <code>image.remove</code> 控制器：</p><figure class="highlight js"><figcaption><span>server/routes.js</span></figcaption><table><tr><td class="code"><pre><span class="line">  router.post(<span class="string">'/images'</span>, upload.single(<span class="string">'file'</span>), image.create);</span><br><span class="line">  router.post(<span class="string">'/images/:image_id/like'</span>, image.like);</span><br><span class="line">  router.post(<span class="string">'/images/:image_id/comment'</span>, image.comment);</span><br><span class="line">[tuture-add]  router.delete(<span class="string">'/images/:image_id'</span>, image.remove);</span><br><span class="line">  app.use(router);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果你尝试运行网站，你会发现点击点赞和删除按钮并没有什么用。因此，我们选用 jQuery 来实现前端界面向服务器发起点赞和删除的请求。在布局文件中添加 jQuery 的静态链接，以及相应的 jQuery 代码（如果不熟悉 jQuery 也不必过于纠结，直接复制粘贴就行了）：</p><figure class="highlight handlebars"><figcaption><span>views/layouts/main.handlebars</span></figcaption><table><tr><td class="code"><pre><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">[tuture-add]&lt;script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">[tuture-add]&lt;script&gt;</span><br><span class="line">[tuture-add]  $(function () &#123;</span><br><span class="line">[tuture-add]    // to do...</span><br><span class="line">[tuture-add]  &#125;);</span><br><span class="line">[tuture-add]</span><br><span class="line">[tuture-add]  $('#btn-like').on('click', function (event) &#123;</span><br><span class="line">[tuture-add]    event.preventDefault();</span><br><span class="line">[tuture-add]    var imgId = $(this).data('id');</span><br><span class="line">[tuture-add]    $.post('/images/' + imgId + '/like').done(function (data) &#123;</span><br><span class="line">[tuture-add]      $('.likes-count').text(data.likes);</span><br><span class="line">[tuture-add]    &#125;);</span><br><span class="line">[tuture-add]  &#125;);</span><br><span class="line">[tuture-add]</span><br><span class="line">[tuture-add]  $('#btn-delete').on('click', function (event) &#123;</span><br><span class="line">[tuture-add]    event.preventDefault();</span><br><span class="line">[tuture-add]    var $this = $(this);</span><br><span class="line">[tuture-add]</span><br><span class="line">[tuture-add]    var remove = confirm('确定要删除这张图片吗?');</span><br><span class="line">[tuture-add]    if (remove) &#123;</span><br><span class="line">[tuture-add]      var imgId = $(this).data('id');</span><br><span class="line">[tuture-add]      $</span><br><span class="line">[tuture-add]        .ajax(&#123;</span><br><span class="line">[tuture-add]          url: '/images/' + imgId,</span><br><span class="line">[tuture-add]          type: 'DELETE'</span><br><span class="line">[tuture-add]        &#125;)</span><br><span class="line">[tuture-add]        .done(function (result) &#123;</span><br><span class="line">[tuture-add]          if (result) &#123;</span><br><span class="line">[tuture-add]            $this.removeClass('btn-danger').addClass('btn-success');</span><br><span class="line">[tuture-add]            $this.find('i').removeClass('fa-times').addClass('fa-check');</span><br><span class="line">[tuture-add]            $this.append('&lt;span&gt; 已删除!&lt;/span&gt;');</span><br><span class="line">[tuture-add]          &#125;</span><br><span class="line">[tuture-add]        &#125;);</span><br><span class="line">[tuture-add]    &#125;</span><br><span class="line">[tuture-add]  &#125;);</span><br><span class="line">[tuture-add]&lt;/script&gt;</span><br><span class="line">[tuture-add]</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>再尝试运行网站，可以看到点赞和删除功能都已经实现了！只不过侧边栏的所有数据都没有同步更新，我们将在下一步中进行完善。</p><h2 id="完善用户界面"><a href="#完善用户界面" class="headerlink" title="完善用户界面"></a>完善用户界面</h2><p>终于来到教程的最后一步！我们将实现侧边栏中所有容器（统计数据、最受欢迎图片和最新评论）的数据同步。先创建 helpers 目录，用于存放侧边栏数据获取的相关代码。然后分析一下数据同步逻辑（例如统计数据），我们发现要进行的查询非常多：图片总数、评论总数、图片所有的访问量、图片所有的点赞数。如果按照普通的写法，我们也许会这样写：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">queryA(<span class="function"><span class="keyword">function</span>(<span class="params">err, resultsA</span>) </span>&#123;</span><br><span class="line">  queryB(<span class="function"><span class="keyword">function</span>(<span class="params">err, resultsB</span>) </span>&#123;</span><br><span class="line">    queryC(<span class="function"><span class="keyword">function</span>(<span class="params">err, resultsC</span>) </span>&#123;</span><br><span class="line">      queryD(<span class="function"><span class="keyword">function</span>(<span class="params">err, resultsD</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// some code ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的代码不仅十分丑陋，难以维护（即大家常说的“回调地狱”），而且性能也十分糟糕——所有查询都是链式执行。但其实所有的查询都是相互独立的，完全可以并发进行，那我们应该怎么写呢？</p><p>答案就是 <a href="http://caolan.github.io/async/" target="_blank" rel="noopener">async</a> 库。async 是在 ECMAScript 6 的 Promise 体系出现之前最流行的异步组件库，凭借其强大的性能、丰富且设计良好的接口成为 Node 和前端开发中解决异步的最佳选择之一。这里我们也用 async 来解决并发获取数据的问题。安装 async 包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install async</span><br></pre></td></tr></table></figure><p>然后创建 helpers/stats.js，用于获取网站统计数据：</p><figure class="highlight js"><figcaption><span>helpers/stats.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);</span><br><span class="line"><span class="keyword">const</span> ImageModel = <span class="built_in">require</span>(<span class="string">'../models/image'</span>);</span><br><span class="line"><span class="keyword">const</span> CommentModel = <span class="built_in">require</span>(<span class="string">'../models/comment'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">async</span>.parallel(</span><br><span class="line">    [</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 统计图片总数</span></span><br><span class="line">        ImageModel.count(&#123;&#125;, next);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 统计评论总数</span></span><br><span class="line">        CommentModel.count(&#123;&#125;, next);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 对图片所有访问量求和</span></span><br><span class="line">        ImageModel.aggregate(</span><br><span class="line">          [</span><br><span class="line">            &#123;</span><br><span class="line">              $group: &#123;</span><br><span class="line">                _id: <span class="string">'1'</span>,</span><br><span class="line">                viewsTotal: &#123; <span class="attr">$sum</span>: <span class="string">'$views'</span> &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">              <span class="keyword">return</span> next(err);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> viewsTotal = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (result.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              viewsTotal += result[<span class="number">0</span>].viewsTotal;</span><br><span class="line">            &#125;</span><br><span class="line">            next(<span class="literal">null</span>, viewsTotal);</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 对所有点赞数求和</span></span><br><span class="line">        ImageModel.aggregate(</span><br><span class="line">          [</span><br><span class="line">            &#123;</span><br><span class="line">              $group: &#123;</span><br><span class="line">                _id: <span class="string">'1'</span>,</span><br><span class="line">                likesTotal: &#123; <span class="attr">$sum</span>: <span class="string">'$likes'</span> &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">              <span class="keyword">return</span> next(err);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> likesTotal = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (result.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              likesTotal += result[<span class="number">0</span>].likesTotal;</span><br><span class="line">            &#125;</span><br><span class="line">            next(<span class="literal">null</span>, likesTotal);</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">      callback(<span class="literal">null</span>, &#123;</span><br><span class="line">        images: results[<span class="number">0</span>],</span><br><span class="line">        comments: results[<span class="number">1</span>],</span><br><span class="line">        views: results[<span class="number">2</span>],</span><br><span class="line">        likes: results[<span class="number">3</span>],</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里我们用到了 <code>async.parallel</code> 接口，它接受两个参数：</p><ul><li><code>tasks</code>：一个函数数组，每个函数对应一个异步任务（所有任务将并发执行），并且接受一个回调函数用于返回任务执行的结果；</li><li><code>callback</code>：整个任务组的回调函数，可以获取所有异步任务执行完成后的所有结果。</li></ul><p>我们将四个数据查询任务包装成四个函数作为 <code>async.parallel</code> 的第一个参数，在最后的 <code>callback</code> 中返回所有查询结果。非常简洁、优雅。</p><p>接下来实现侧边栏中的最新图片模块，一个简单的数据库查询即可：</p><figure class="highlight js"><figcaption><span>helpers/images.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ImageModel = <span class="built_in">require</span>(<span class="string">'../models/image'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  popular: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    ImageModel.find(&#123;&#125;, &#123;&#125;, &#123; <span class="attr">limit</span>: <span class="number">9</span>, <span class="attr">sort</span>: &#123; <span class="attr">likes</span>: <span class="number">-1</span> &#125; &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      err,</span></span></span><br><span class="line"><span class="function"><span class="params">      images,</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> callback(err);</span><br><span class="line">      callback(<span class="literal">null</span>, images);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后是创建获取最新评论的代码。不过简单地查询评论模型是不够的，我们还需要获取到每个评论对应的图片，这时候用 <code>async.each</code> 函数对一个数组中所有对象进行异步操作最为合适不过。整个模块的代码如下：</p><figure class="highlight js"><figcaption><span>helpers/comments.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);</span><br><span class="line"><span class="keyword">const</span> ImageModel = <span class="built_in">require</span>(<span class="string">'../models/image'</span>);</span><br><span class="line"><span class="keyword">const</span> CommentModel = <span class="built_in">require</span>(<span class="string">'../models/comment'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  newest: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    CommentModel.find(&#123;&#125;, &#123;&#125;, &#123; <span class="attr">limit</span>: <span class="number">5</span>, <span class="attr">sort</span>: &#123; <span class="attr">timestamp</span>: <span class="number">-1</span> &#125; &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      err,</span></span></span><br><span class="line"><span class="function"><span class="params">      comments,</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> callback(err);</span><br><span class="line">      <span class="keyword">var</span> attachImage = <span class="function"><span class="keyword">function</span>(<span class="params">comment, next</span>) </span>&#123;</span><br><span class="line">        ImageModel.findOne(&#123; <span class="attr">_id</span>: comment.image_id &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, image</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">          comment.image = image;</span><br><span class="line">          next(err);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">async</span>.each(comments, attachImage, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        callback(err, comments);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>async.each</code> 函数接受的三个参数如下：</p><ul><li><code>collection</code>：用于接收异步操作的集合，这里是评论集；</li><li><code>iteratee</code>：异步操作函数，这里是 <code>attachImage</code> 函数；</li><li><code>callback</code>：全部操作执行完成的回调函数。</li></ul><p>我们将前面三个 helper 函数放到一起，创建一个 sidebar 模块，并发获取三个模块的数据。这里我们还是用 <code>async.parallel</code> 函数，因为三个模块本质上也是异步查询：</p><figure class="highlight js"><figcaption><span>helpers/sidebar.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);</span><br><span class="line"><span class="keyword">const</span> Stats = <span class="built_in">require</span>(<span class="string">'./stats'</span>);</span><br><span class="line"><span class="keyword">const</span> Images = <span class="built_in">require</span>(<span class="string">'./images'</span>);</span><br><span class="line"><span class="keyword">const</span> Comments = <span class="built_in">require</span>(<span class="string">'./comments'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">viewModel, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">async</span>.parallel(</span><br><span class="line">    [</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">        Stats(next);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">        Images.popular(next);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">        Comments.newest(next);</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">      viewModel.sidebar = &#123;</span><br><span class="line">        stats: results[<span class="number">0</span>],</span><br><span class="line">        popular: results[<span class="number">1</span>],</span><br><span class="line">        comments: results[<span class="number">2</span>],</span><br><span class="line">      &#125;;</span><br><span class="line">      callback(viewModel);</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>并发的异步操作层层嵌套，是不是很炫酷呢？</p><p>最后将我们炫酷的 sidebar 模块用到 home 和 image 控制器中：</p><figure class="highlight js"><figcaption><span>controllers/home.js</span></figcaption><table><tr><td class="code"><pre><span class="line">[tuture-add]<span class="keyword">const</span> sidebar = <span class="built_in">require</span>(<span class="string">'../helpers/sidebar'</span>);</span><br><span class="line"><span class="keyword">const</span> ImageModel = <span class="built_in">require</span>(<span class="string">'../models/image'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">[tuture-omit]</span><br><span class="line">    ImageModel.find(&#123;&#125;, &#123;&#125;, &#123; <span class="attr">sort</span>: &#123; <span class="attr">timestamp</span>: <span class="number">-1</span> &#125; &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, images</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">      viewModel.images = images;</span><br><span class="line">[tuture-del]      res.render(<span class="string">'index'</span>, viewModel);</span><br><span class="line">[tuture-add]      sidebar(viewModel, <span class="function"><span class="keyword">function</span>(<span class="params">viewModel</span>) </span>&#123;</span><br><span class="line">[tuture-add]        res.render(<span class="string">'index'</span>, viewModel);</span><br><span class="line">[tuture-add]      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>controllers/image.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">'md5'</span>);</span><br><span class="line">[tuture-add]<span class="keyword">const</span> sidebar = <span class="built_in">require</span>(<span class="string">'../helpers/sidebar'</span>);</span><br><span class="line"><span class="keyword">const</span> ImageModel = <span class="built_in">require</span>(<span class="string">'../models/image'</span>);</span><br><span class="line"><span class="keyword">const</span> CommentModel = <span class="built_in">require</span>(<span class="string">'../models/comment'</span>);</span><br><span class="line"></span><br><span class="line">[tuture-omit]</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">err, comments</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">            viewModel.comments = comments;</span><br><span class="line">[tuture-del]            res.render(<span class="string">'image'</span>, viewModel);</span><br><span class="line">[tuture-add]            sidebar(viewModel, <span class="function"><span class="keyword">function</span>(<span class="params">viewModel</span>) </span>&#123;</span><br><span class="line">[tuture-add]              res.render(<span class="string">'image'</span>, viewModel);</span><br><span class="line">[tuture-add]            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br></pre></td></tr></table></figure><p>侧边栏的所有数据都能够同步更新，我们的网站也基本完成了！</p>]]></content>
    
    <summary type="html">
    
      在本系列教程的第二部分中，我们将接入 MongoDB 数据库，并由此实现围绕图片、评论的功能。
    
    </summary>
    
    
    
      <category term="Node" scheme="https://tuture.co/tags/Node/"/>
    
      <category term="MongoDB" scheme="https://tuture.co/tags/MongoDB/"/>
    
  </entry>
  
</feed>
